// login.js

"use client" // Indicates that this file contains client-side code for Next.js

import React, { useState, useContext } from 'react'; // Importing necessary hooks and context from React
import Head from 'next/head'; // Importing Head component for setting metadata in the HTML document
import Image from 'next/image'; // Importing Image component from Next.js for optimized images
import { signIn } from 'next-auth/react'; // Importing signIn function from next-auth for authentication
import { UserContext } from '@/UserContext'; // Importing UserContext to manage user state
import "../styles/Home.module.css"; // Importing CSS module for styling

function Login() {
  // Defining state variables for username, password, and branchCode
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [branchCode, setBranchCode] = useState("");

  // Using useContext hook to access user state and loginUser function from UserContext
  const { user, loginUser } = useContext(UserContext);

  console.log(user); // Logging the current user state for debugging purposes

  /*
  The commented out code below suggests an alternative way of defining the loginUser function locally instead of using the context's loginUser function.
  It shows how the signIn function from next-auth can be used to handle authentication.
  */

  // const loginUser = async (event) => {
  //   event.preventDefault();

  //   try {
  //     const result = await signIn('credentials', {
  //       username: username,
  //         password: password,
  //         // callbackUrl: "http://localhost:3000/login",
  //         redirect: false,
  //     });

  //     if (result.error) {
  //       console.error('Authentication failed:', result.error);
  //       alert('Authentication failed');
  //     } else {
  //       console.log('User:', user);
  //       console.log(result)
  //       router.push("/production-home");
  //       // You can check result.url and redirect accordingly
  //     }
  //   } catch (error) {
  //     console.error('An error occurred while logging in:', error);
  //     alert('An error occurred while logging in: ' + error.message);
  //   }
  // };

  return (
    <>
      {/* Head tag for setting HTML metadata */}
      <Head>
        <title>MSSPL LOGIN PAGE</title> {/* Title of the page */}
        <meta name="description" content="Generated by create next app" /> {/* Meta description */}
        <meta name="viewport" content="width=device-width, initial-scale=1" /> {/* Responsive meta tag */}
        <link rel="icon" href="/favicon.ico" /> {/* Favicon for the page */}
      </Head>

      {/* Main section with custom class for styling */}
      <section className="h-100 gradient-form">
        <div className="container py-5"> {/* Container for centering the content */}
          <div className="row d-flex justify-content-center align-items-center h-100">
            <div className="col-xl-6"> {/* Column for the card layout */}
              <div className="card rounded-10 text-black h-100"> {/* Card component with custom classes */}
                <div className="row g-0 justify-content-center align-items-center">
                  <div className="col-lg-10"> {/* Column inside the card for the form */}
                    <div className="card-body p-md-5 mx-md-4">
                      <div className="text-center pb-2">
                        <Image src="/logo.png" width={115} height={115} alt="logo" /> {/* Logo image */}
                        <h6 className="mt-1 mb-5 pb-1 login-head">Multiple Special Steel Pvt. Ltd.</h6> {/* Heading */}
                      </div>

                      {/* Form for login */}
                      <form onSubmit={(e) => loginUser(e, username, password)}>
                        <p className='login-heading'>Please login to your account</p> {/* Form heading */}

                        {/* Input field for username with floating label */}
                        <div className="form-floating mb-3">
                          <input
                            type="text"
                            className="form-control"
                            id="floatingInput"
                            placeholder="name@example.com"
                            onChange={(e) => setUsername(e.target.value)}
                            aria-label="Username"
                          />
                          <label htmlFor="floatingInput" className="form-label">User Name</label> {/* Floating label */}
                        </div>

                        {/* Input field for password with floating label */}
                        <div className="form-floating">
                          <input
                            type="password"
                            className="form-control"
                            id="floatingPassword"
                            placeholder="Password"
                            autoComplete="off"
                            onChange={(e) => setPassword(e.target.value)}
                            aria-label="Password"
                          />
                          <i className="bi bi-eye-slash" id="togglePassword"></i> {/* Icon for toggling password visibility */}
                          <label htmlFor="floatingPassword" className="form-label">Password</label> {/* Floating label */}
                        </div>

                        {/* Submit button */}
                        <button
                          className="w-100 btn lg-botton mt-4 mb-4 btn btn-primary"
                          type="submit"
                          aria-label="Log in button"
                        >
                          Log in
                        </button>
                      </form>

                      {/* Conditionally render branch code if it exists */}
                      {branchCode && (
                        <div className="text-center">
                          <p>Branch Code: {branchCode}</p> {/* Display branch code */}
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
    </>
  );
}

export default Login; // Exporting the Login component as default export
